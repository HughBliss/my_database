// Code generated by ent, DO NOT EDIT.

package dbauth

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/domain"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/predicate"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/role"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/user"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/userdomain"
	"github.com/rs/xid"
)

// UserDomainUpdate is the builder for updating UserDomain entities.
type UserDomainUpdate struct {
	config
	hooks     []Hook
	mutation  *UserDomainMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserDomainUpdate builder.
func (udu *UserDomainUpdate) Where(ps ...predicate.UserDomain) *UserDomainUpdate {
	udu.mutation.Where(ps...)
	return udu
}

// SetUserID sets the "user_id" field.
func (udu *UserDomainUpdate) SetUserID(x xid.ID) *UserDomainUpdate {
	udu.mutation.SetUserID(x)
	return udu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (udu *UserDomainUpdate) SetNillableUserID(x *xid.ID) *UserDomainUpdate {
	if x != nil {
		udu.SetUserID(*x)
	}
	return udu
}

// SetDomainID sets the "domain_id" field.
func (udu *UserDomainUpdate) SetDomainID(x xid.ID) *UserDomainUpdate {
	udu.mutation.SetDomainID(x)
	return udu
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (udu *UserDomainUpdate) SetNillableDomainID(x *xid.ID) *UserDomainUpdate {
	if x != nil {
		udu.SetDomainID(*x)
	}
	return udu
}

// SetRoleID sets the "role_id" field.
func (udu *UserDomainUpdate) SetRoleID(x xid.ID) *UserDomainUpdate {
	udu.mutation.SetRoleID(x)
	return udu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (udu *UserDomainUpdate) SetNillableRoleID(x *xid.ID) *UserDomainUpdate {
	if x != nil {
		udu.SetRoleID(*x)
	}
	return udu
}

// SetUser sets the "user" edge to the User entity.
func (udu *UserDomainUpdate) SetUser(u *User) *UserDomainUpdate {
	return udu.SetUserID(u.ID)
}

// SetDomain sets the "domain" edge to the Domain entity.
func (udu *UserDomainUpdate) SetDomain(d *Domain) *UserDomainUpdate {
	return udu.SetDomainID(d.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (udu *UserDomainUpdate) SetRole(r *Role) *UserDomainUpdate {
	return udu.SetRoleID(r.ID)
}

// Mutation returns the UserDomainMutation object of the builder.
func (udu *UserDomainUpdate) Mutation() *UserDomainMutation {
	return udu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (udu *UserDomainUpdate) ClearUser() *UserDomainUpdate {
	udu.mutation.ClearUser()
	return udu
}

// ClearDomain clears the "domain" edge to the Domain entity.
func (udu *UserDomainUpdate) ClearDomain() *UserDomainUpdate {
	udu.mutation.ClearDomain()
	return udu
}

// ClearRole clears the "role" edge to the Role entity.
func (udu *UserDomainUpdate) ClearRole() *UserDomainUpdate {
	udu.mutation.ClearRole()
	return udu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (udu *UserDomainUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, udu.sqlSave, udu.mutation, udu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udu *UserDomainUpdate) SaveX(ctx context.Context) int {
	affected, err := udu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udu *UserDomainUpdate) Exec(ctx context.Context) error {
	_, err := udu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udu *UserDomainUpdate) ExecX(ctx context.Context) {
	if err := udu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udu *UserDomainUpdate) check() error {
	if udu.mutation.UserCleared() && len(udu.mutation.UserIDs()) > 0 {
		return errors.New(`dbauth: clearing a required unique edge "UserDomain.user"`)
	}
	if udu.mutation.DomainCleared() && len(udu.mutation.DomainIDs()) > 0 {
		return errors.New(`dbauth: clearing a required unique edge "UserDomain.domain"`)
	}
	if udu.mutation.RoleCleared() && len(udu.mutation.RoleIDs()) > 0 {
		return errors.New(`dbauth: clearing a required unique edge "UserDomain.role"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (udu *UserDomainUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserDomainUpdate {
	udu.modifiers = append(udu.modifiers, modifiers...)
	return udu
}

func (udu *UserDomainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := udu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userdomain.Table, userdomain.Columns, sqlgraph.NewFieldSpec(userdomain.FieldDomainID, field.TypeString), sqlgraph.NewFieldSpec(userdomain.FieldUserID, field.TypeString))
	if ps := udu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if udu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.UserTable,
			Columns: []string{userdomain.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := udu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.UserTable,
			Columns: []string{userdomain.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if udu.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.DomainTable,
			Columns: []string{userdomain.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := udu.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.DomainTable,
			Columns: []string{userdomain.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if udu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.RoleTable,
			Columns: []string{userdomain.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := udu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.RoleTable,
			Columns: []string{userdomain.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(udu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, udu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdomain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	udu.mutation.done = true
	return n, nil
}

// UserDomainUpdateOne is the builder for updating a single UserDomain entity.
type UserDomainUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserDomainMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (uduo *UserDomainUpdateOne) SetUserID(x xid.ID) *UserDomainUpdateOne {
	uduo.mutation.SetUserID(x)
	return uduo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uduo *UserDomainUpdateOne) SetNillableUserID(x *xid.ID) *UserDomainUpdateOne {
	if x != nil {
		uduo.SetUserID(*x)
	}
	return uduo
}

// SetDomainID sets the "domain_id" field.
func (uduo *UserDomainUpdateOne) SetDomainID(x xid.ID) *UserDomainUpdateOne {
	uduo.mutation.SetDomainID(x)
	return uduo
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (uduo *UserDomainUpdateOne) SetNillableDomainID(x *xid.ID) *UserDomainUpdateOne {
	if x != nil {
		uduo.SetDomainID(*x)
	}
	return uduo
}

// SetRoleID sets the "role_id" field.
func (uduo *UserDomainUpdateOne) SetRoleID(x xid.ID) *UserDomainUpdateOne {
	uduo.mutation.SetRoleID(x)
	return uduo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uduo *UserDomainUpdateOne) SetNillableRoleID(x *xid.ID) *UserDomainUpdateOne {
	if x != nil {
		uduo.SetRoleID(*x)
	}
	return uduo
}

// SetUser sets the "user" edge to the User entity.
func (uduo *UserDomainUpdateOne) SetUser(u *User) *UserDomainUpdateOne {
	return uduo.SetUserID(u.ID)
}

// SetDomain sets the "domain" edge to the Domain entity.
func (uduo *UserDomainUpdateOne) SetDomain(d *Domain) *UserDomainUpdateOne {
	return uduo.SetDomainID(d.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (uduo *UserDomainUpdateOne) SetRole(r *Role) *UserDomainUpdateOne {
	return uduo.SetRoleID(r.ID)
}

// Mutation returns the UserDomainMutation object of the builder.
func (uduo *UserDomainUpdateOne) Mutation() *UserDomainMutation {
	return uduo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uduo *UserDomainUpdateOne) ClearUser() *UserDomainUpdateOne {
	uduo.mutation.ClearUser()
	return uduo
}

// ClearDomain clears the "domain" edge to the Domain entity.
func (uduo *UserDomainUpdateOne) ClearDomain() *UserDomainUpdateOne {
	uduo.mutation.ClearDomain()
	return uduo
}

// ClearRole clears the "role" edge to the Role entity.
func (uduo *UserDomainUpdateOne) ClearRole() *UserDomainUpdateOne {
	uduo.mutation.ClearRole()
	return uduo
}

// Where appends a list predicates to the UserDomainUpdate builder.
func (uduo *UserDomainUpdateOne) Where(ps ...predicate.UserDomain) *UserDomainUpdateOne {
	uduo.mutation.Where(ps...)
	return uduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uduo *UserDomainUpdateOne) Select(field string, fields ...string) *UserDomainUpdateOne {
	uduo.fields = append([]string{field}, fields...)
	return uduo
}

// Save executes the query and returns the updated UserDomain entity.
func (uduo *UserDomainUpdateOne) Save(ctx context.Context) (*UserDomain, error) {
	return withHooks(ctx, uduo.sqlSave, uduo.mutation, uduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uduo *UserDomainUpdateOne) SaveX(ctx context.Context) *UserDomain {
	node, err := uduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uduo *UserDomainUpdateOne) Exec(ctx context.Context) error {
	_, err := uduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uduo *UserDomainUpdateOne) ExecX(ctx context.Context) {
	if err := uduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uduo *UserDomainUpdateOne) check() error {
	if uduo.mutation.UserCleared() && len(uduo.mutation.UserIDs()) > 0 {
		return errors.New(`dbauth: clearing a required unique edge "UserDomain.user"`)
	}
	if uduo.mutation.DomainCleared() && len(uduo.mutation.DomainIDs()) > 0 {
		return errors.New(`dbauth: clearing a required unique edge "UserDomain.domain"`)
	}
	if uduo.mutation.RoleCleared() && len(uduo.mutation.RoleIDs()) > 0 {
		return errors.New(`dbauth: clearing a required unique edge "UserDomain.role"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uduo *UserDomainUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserDomainUpdateOne {
	uduo.modifiers = append(uduo.modifiers, modifiers...)
	return uduo
}

func (uduo *UserDomainUpdateOne) sqlSave(ctx context.Context) (_node *UserDomain, err error) {
	if err := uduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userdomain.Table, userdomain.Columns, sqlgraph.NewFieldSpec(userdomain.FieldDomainID, field.TypeString), sqlgraph.NewFieldSpec(userdomain.FieldUserID, field.TypeString))
	if id, ok := uduo.mutation.DomainID(); !ok {
		return nil, &ValidationError{Name: "domain_id", err: errors.New(`dbauth: missing "UserDomain.domain_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := uduo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`dbauth: missing "UserDomain.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := uduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !userdomain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dbauth: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := uduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uduo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.UserTable,
			Columns: []string{userdomain.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uduo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.UserTable,
			Columns: []string{userdomain.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uduo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.DomainTable,
			Columns: []string{userdomain.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uduo.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.DomainTable,
			Columns: []string{userdomain.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uduo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.RoleTable,
			Columns: []string{userdomain.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uduo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.RoleTable,
			Columns: []string{userdomain.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uduo.modifiers...)
	_node = &UserDomain{config: uduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdomain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uduo.mutation.done = true
	return _node, nil
}
