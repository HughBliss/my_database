// Code generated by ent, DO NOT EDIT.

package dbauth

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/domain"
	"github.com/rs/xid"
)

// Domain is the model entity for the Domain schema.
type Domain struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DomainQuery when eager-loading is set.
	Edges        DomainEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DomainEdges holds the relations/edges for other nodes in the graph.
type DomainEdges struct {
	// ActiveUsers holds the value of the active_users edge.
	ActiveUsers []*User `json:"active_users,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// UserDomain holds the value of the user_domain edge.
	UserDomain []*UserDomain `json:"user_domain,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ActiveUsersOrErr returns the ActiveUsers value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) ActiveUsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.ActiveUsers, nil
	}
	return nil, &NotLoadedError{edge: "active_users"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[1] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// UserDomainOrErr returns the UserDomain value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) UserDomainOrErr() ([]*UserDomain, error) {
	if e.loadedTypes[3] {
		return e.UserDomain, nil
	}
	return nil, &NotLoadedError{edge: "user_domain"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Domain) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case domain.FieldName:
			values[i] = new(sql.NullString)
		case domain.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Domain fields.
func (d *Domain) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case domain.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case domain.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Domain.
// This includes values selected through modifiers, order, etc.
func (d *Domain) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryActiveUsers queries the "active_users" edge of the Domain entity.
func (d *Domain) QueryActiveUsers() *UserQuery {
	return NewDomainClient(d.config).QueryActiveUsers(d)
}

// QueryRoles queries the "roles" edge of the Domain entity.
func (d *Domain) QueryRoles() *RoleQuery {
	return NewDomainClient(d.config).QueryRoles(d)
}

// QueryUsers queries the "users" edge of the Domain entity.
func (d *Domain) QueryUsers() *UserQuery {
	return NewDomainClient(d.config).QueryUsers(d)
}

// QueryUserDomain queries the "user_domain" edge of the Domain entity.
func (d *Domain) QueryUserDomain() *UserDomainQuery {
	return NewDomainClient(d.config).QueryUserDomain(d)
}

// Update returns a builder for updating this Domain.
// Note that you need to call Domain.Unwrap() before calling this method if this Domain
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Domain) Update() *DomainUpdateOne {
	return NewDomainClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Domain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Domain) Unwrap() *Domain {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("dbauth: Domain is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Domain) String() string {
	var builder strings.Builder
	builder.WriteString("Domain(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Domains is a parsable slice of Domain.
type Domains []*Domain
