// Code generated by ent, DO NOT EDIT.

package dbauth

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (d *Domain) ActiveUsers(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedActiveUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.ActiveUsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryActiveUsers().All(ctx)
	}
	return result, err
}

func (d *Domain) Roles(ctx context.Context) (result []*Role, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.RolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryRoles().All(ctx)
	}
	return result, err
}

func (d *Domain) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryUsers().All(ctx)
	}
	return result, err
}

func (r *Role) Domain(ctx context.Context) (*Domain, error) {
	result, err := r.Edges.DomainOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryDomain().Only(ctx)
	}
	return result, err
}

func (u *User) CurrentDomain(ctx context.Context) (*Domain, error) {
	result, err := u.Edges.CurrentDomainOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryCurrentDomain().Only(ctx)
	}
	return result, err
}

func (u *User) Domains(ctx context.Context) (result []*Domain, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedDomains(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.DomainsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryDomains().All(ctx)
	}
	return result, err
}
