// Code generated by ent, DO NOT EDIT.

package dbexample

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hughbliss/my_database/pkg/gen/dbexample/example"
	"github.com/hughbliss/my_database/pkg/gen/dbexample/predicate"
)

// ExampleUpdate is the builder for updating Example entities.
type ExampleUpdate struct {
	config
	hooks     []Hook
	mutation  *ExampleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ExampleUpdate builder.
func (eu *ExampleUpdate) Where(ps ...predicate.Example) *ExampleUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetSomeString sets the "some_string" field.
func (eu *ExampleUpdate) SetSomeString(s string) *ExampleUpdate {
	eu.mutation.SetSomeString(s)
	return eu
}

// SetNillableSomeString sets the "some_string" field if the given value is not nil.
func (eu *ExampleUpdate) SetNillableSomeString(s *string) *ExampleUpdate {
	if s != nil {
		eu.SetSomeString(*s)
	}
	return eu
}

// SetSomeInt sets the "some_int" field.
func (eu *ExampleUpdate) SetSomeInt(i int) *ExampleUpdate {
	eu.mutation.ResetSomeInt()
	eu.mutation.SetSomeInt(i)
	return eu
}

// SetNillableSomeInt sets the "some_int" field if the given value is not nil.
func (eu *ExampleUpdate) SetNillableSomeInt(i *int) *ExampleUpdate {
	if i != nil {
		eu.SetSomeInt(*i)
	}
	return eu
}

// AddSomeInt adds i to the "some_int" field.
func (eu *ExampleUpdate) AddSomeInt(i int) *ExampleUpdate {
	eu.mutation.AddSomeInt(i)
	return eu
}

// SetSomeFloat sets the "some_float" field.
func (eu *ExampleUpdate) SetSomeFloat(f float64) *ExampleUpdate {
	eu.mutation.ResetSomeFloat()
	eu.mutation.SetSomeFloat(f)
	return eu
}

// SetNillableSomeFloat sets the "some_float" field if the given value is not nil.
func (eu *ExampleUpdate) SetNillableSomeFloat(f *float64) *ExampleUpdate {
	if f != nil {
		eu.SetSomeFloat(*f)
	}
	return eu
}

// AddSomeFloat adds f to the "some_float" field.
func (eu *ExampleUpdate) AddSomeFloat(f float64) *ExampleUpdate {
	eu.mutation.AddSomeFloat(f)
	return eu
}

// SetSomeBool sets the "some_bool" field.
func (eu *ExampleUpdate) SetSomeBool(b bool) *ExampleUpdate {
	eu.mutation.SetSomeBool(b)
	return eu
}

// SetNillableSomeBool sets the "some_bool" field if the given value is not nil.
func (eu *ExampleUpdate) SetNillableSomeBool(b *bool) *ExampleUpdate {
	if b != nil {
		eu.SetSomeBool(*b)
	}
	return eu
}

// SetSomeTime sets the "some_time" field.
func (eu *ExampleUpdate) SetSomeTime(t time.Time) *ExampleUpdate {
	eu.mutation.SetSomeTime(t)
	return eu
}

// SetNillableSomeTime sets the "some_time" field if the given value is not nil.
func (eu *ExampleUpdate) SetNillableSomeTime(t *time.Time) *ExampleUpdate {
	if t != nil {
		eu.SetSomeTime(*t)
	}
	return eu
}

// Mutation returns the ExampleMutation object of the builder.
func (eu *ExampleUpdate) Mutation() *ExampleMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExampleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExampleUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExampleUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExampleUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *ExampleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ExampleUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *ExampleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(example.Table, example.Columns, sqlgraph.NewFieldSpec(example.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.SomeString(); ok {
		_spec.SetField(example.FieldSomeString, field.TypeString, value)
	}
	if value, ok := eu.mutation.SomeInt(); ok {
		_spec.SetField(example.FieldSomeInt, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedSomeInt(); ok {
		_spec.AddField(example.FieldSomeInt, field.TypeInt, value)
	}
	if value, ok := eu.mutation.SomeFloat(); ok {
		_spec.SetField(example.FieldSomeFloat, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedSomeFloat(); ok {
		_spec.AddField(example.FieldSomeFloat, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.SomeBool(); ok {
		_spec.SetField(example.FieldSomeBool, field.TypeBool, value)
	}
	if value, ok := eu.mutation.SomeTime(); ok {
		_spec.SetField(example.FieldSomeTime, field.TypeTime, value)
	}
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{example.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExampleUpdateOne is the builder for updating a single Example entity.
type ExampleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ExampleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetSomeString sets the "some_string" field.
func (euo *ExampleUpdateOne) SetSomeString(s string) *ExampleUpdateOne {
	euo.mutation.SetSomeString(s)
	return euo
}

// SetNillableSomeString sets the "some_string" field if the given value is not nil.
func (euo *ExampleUpdateOne) SetNillableSomeString(s *string) *ExampleUpdateOne {
	if s != nil {
		euo.SetSomeString(*s)
	}
	return euo
}

// SetSomeInt sets the "some_int" field.
func (euo *ExampleUpdateOne) SetSomeInt(i int) *ExampleUpdateOne {
	euo.mutation.ResetSomeInt()
	euo.mutation.SetSomeInt(i)
	return euo
}

// SetNillableSomeInt sets the "some_int" field if the given value is not nil.
func (euo *ExampleUpdateOne) SetNillableSomeInt(i *int) *ExampleUpdateOne {
	if i != nil {
		euo.SetSomeInt(*i)
	}
	return euo
}

// AddSomeInt adds i to the "some_int" field.
func (euo *ExampleUpdateOne) AddSomeInt(i int) *ExampleUpdateOne {
	euo.mutation.AddSomeInt(i)
	return euo
}

// SetSomeFloat sets the "some_float" field.
func (euo *ExampleUpdateOne) SetSomeFloat(f float64) *ExampleUpdateOne {
	euo.mutation.ResetSomeFloat()
	euo.mutation.SetSomeFloat(f)
	return euo
}

// SetNillableSomeFloat sets the "some_float" field if the given value is not nil.
func (euo *ExampleUpdateOne) SetNillableSomeFloat(f *float64) *ExampleUpdateOne {
	if f != nil {
		euo.SetSomeFloat(*f)
	}
	return euo
}

// AddSomeFloat adds f to the "some_float" field.
func (euo *ExampleUpdateOne) AddSomeFloat(f float64) *ExampleUpdateOne {
	euo.mutation.AddSomeFloat(f)
	return euo
}

// SetSomeBool sets the "some_bool" field.
func (euo *ExampleUpdateOne) SetSomeBool(b bool) *ExampleUpdateOne {
	euo.mutation.SetSomeBool(b)
	return euo
}

// SetNillableSomeBool sets the "some_bool" field if the given value is not nil.
func (euo *ExampleUpdateOne) SetNillableSomeBool(b *bool) *ExampleUpdateOne {
	if b != nil {
		euo.SetSomeBool(*b)
	}
	return euo
}

// SetSomeTime sets the "some_time" field.
func (euo *ExampleUpdateOne) SetSomeTime(t time.Time) *ExampleUpdateOne {
	euo.mutation.SetSomeTime(t)
	return euo
}

// SetNillableSomeTime sets the "some_time" field if the given value is not nil.
func (euo *ExampleUpdateOne) SetNillableSomeTime(t *time.Time) *ExampleUpdateOne {
	if t != nil {
		euo.SetSomeTime(*t)
	}
	return euo
}

// Mutation returns the ExampleMutation object of the builder.
func (euo *ExampleUpdateOne) Mutation() *ExampleMutation {
	return euo.mutation
}

// Where appends a list predicates to the ExampleUpdate builder.
func (euo *ExampleUpdateOne) Where(ps ...predicate.Example) *ExampleUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExampleUpdateOne) Select(field string, fields ...string) *ExampleUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Example entity.
func (euo *ExampleUpdateOne) Save(ctx context.Context) (*Example, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExampleUpdateOne) SaveX(ctx context.Context) *Example {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExampleUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExampleUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *ExampleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ExampleUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *ExampleUpdateOne) sqlSave(ctx context.Context) (_node *Example, err error) {
	_spec := sqlgraph.NewUpdateSpec(example.Table, example.Columns, sqlgraph.NewFieldSpec(example.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`dbexample: missing "Example.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, example.FieldID)
		for _, f := range fields {
			if !example.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("dbexample: invalid field %q for query", f)}
			}
			if f != example.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.SomeString(); ok {
		_spec.SetField(example.FieldSomeString, field.TypeString, value)
	}
	if value, ok := euo.mutation.SomeInt(); ok {
		_spec.SetField(example.FieldSomeInt, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedSomeInt(); ok {
		_spec.AddField(example.FieldSomeInt, field.TypeInt, value)
	}
	if value, ok := euo.mutation.SomeFloat(); ok {
		_spec.SetField(example.FieldSomeFloat, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedSomeFloat(); ok {
		_spec.AddField(example.FieldSomeFloat, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.SomeBool(); ok {
		_spec.SetField(example.FieldSomeBool, field.TypeBool, value)
	}
	if value, ok := euo.mutation.SomeTime(); ok {
		_spec.SetField(example.FieldSomeTime, field.TypeTime, value)
	}
	_spec.AddModifiers(euo.modifiers...)
	_node = &Example{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{example.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
