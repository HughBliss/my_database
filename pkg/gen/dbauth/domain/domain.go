// Code generated by ent, DO NOT EDIT.

package domain

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the domain type in the database.
	Label = "domain"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeActiveUsers holds the string denoting the active_users edge name in mutations.
	EdgeActiveUsers = "active_users"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeUserDomain holds the string denoting the user_domain edge name in mutations.
	EdgeUserDomain = "user_domain"
	// Table holds the table name of the domain in the database.
	Table = "domains"
	// ActiveUsersTable is the table that holds the active_users relation/edge.
	ActiveUsersTable = "users"
	// ActiveUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ActiveUsersInverseTable = "users"
	// ActiveUsersColumn is the table column denoting the active_users relation/edge.
	ActiveUsersColumn = "current_domain_id"
	// RolesTable is the table that holds the roles relation/edge.
	RolesTable = "roles"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "roles"
	// RolesColumn is the table column denoting the roles relation/edge.
	RolesColumn = "domain_id"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "user_domains"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UserDomainTable is the table that holds the user_domain relation/edge.
	UserDomainTable = "user_domains"
	// UserDomainInverseTable is the table name for the UserDomain entity.
	// It exists in this package in order to avoid circular dependency with the "userdomain" package.
	UserDomainInverseTable = "user_domains"
	// UserDomainColumn is the table column denoting the user_domain relation/edge.
	UserDomainColumn = "domain_id"
)

// Columns holds all SQL columns for domain fields.
var Columns = []string{
	FieldID,
	FieldName,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"domain_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the Domain queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByActiveUsersCount orders the results by active_users count.
func ByActiveUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActiveUsersStep(), opts...)
	}
}

// ByActiveUsers orders the results by active_users terms.
func ByActiveUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActiveUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRolesCount orders the results by roles count.
func ByRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolesStep(), opts...)
	}
}

// ByRoles orders the results by roles terms.
func ByRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserDomainCount orders the results by user_domain count.
func ByUserDomainCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserDomainStep(), opts...)
	}
}

// ByUserDomain orders the results by user_domain terms.
func ByUserDomain(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserDomainStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newActiveUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActiveUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActiveUsersTable, ActiveUsersColumn),
	)
}
func newRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RolesTable, RolesColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
	)
}
func newUserDomainStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserDomainInverseTable, UserDomainColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, UserDomainTable, UserDomainColumn),
	)
}
