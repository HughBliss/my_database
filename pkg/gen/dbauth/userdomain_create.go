// Code generated by ent, DO NOT EDIT.

package dbauth

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/domain"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/role"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/user"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/userdomain"
	"github.com/rs/xid"
)

// UserDomainCreate is the builder for creating a UserDomain entity.
type UserDomainCreate struct {
	config
	mutation *UserDomainMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (udc *UserDomainCreate) SetUserID(x xid.ID) *UserDomainCreate {
	udc.mutation.SetUserID(x)
	return udc
}

// SetDomainID sets the "domain_id" field.
func (udc *UserDomainCreate) SetDomainID(x xid.ID) *UserDomainCreate {
	udc.mutation.SetDomainID(x)
	return udc
}

// SetRoleID sets the "role_id" field.
func (udc *UserDomainCreate) SetRoleID(x xid.ID) *UserDomainCreate {
	udc.mutation.SetRoleID(x)
	return udc
}

// SetUser sets the "user" edge to the User entity.
func (udc *UserDomainCreate) SetUser(u *User) *UserDomainCreate {
	return udc.SetUserID(u.ID)
}

// SetDomain sets the "domain" edge to the Domain entity.
func (udc *UserDomainCreate) SetDomain(d *Domain) *UserDomainCreate {
	return udc.SetDomainID(d.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (udc *UserDomainCreate) SetRole(r *Role) *UserDomainCreate {
	return udc.SetRoleID(r.ID)
}

// Mutation returns the UserDomainMutation object of the builder.
func (udc *UserDomainCreate) Mutation() *UserDomainMutation {
	return udc.mutation
}

// Save creates the UserDomain in the database.
func (udc *UserDomainCreate) Save(ctx context.Context) (*UserDomain, error) {
	return withHooks(ctx, udc.sqlSave, udc.mutation, udc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (udc *UserDomainCreate) SaveX(ctx context.Context) *UserDomain {
	v, err := udc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udc *UserDomainCreate) Exec(ctx context.Context) error {
	_, err := udc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udc *UserDomainCreate) ExecX(ctx context.Context) {
	if err := udc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udc *UserDomainCreate) check() error {
	if _, ok := udc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`dbauth: missing required field "UserDomain.user_id"`)}
	}
	if _, ok := udc.mutation.DomainID(); !ok {
		return &ValidationError{Name: "domain_id", err: errors.New(`dbauth: missing required field "UserDomain.domain_id"`)}
	}
	if _, ok := udc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`dbauth: missing required field "UserDomain.role_id"`)}
	}
	if len(udc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`dbauth: missing required edge "UserDomain.user"`)}
	}
	if len(udc.mutation.DomainIDs()) == 0 {
		return &ValidationError{Name: "domain", err: errors.New(`dbauth: missing required edge "UserDomain.domain"`)}
	}
	if len(udc.mutation.RoleIDs()) == 0 {
		return &ValidationError{Name: "role", err: errors.New(`dbauth: missing required edge "UserDomain.role"`)}
	}
	return nil
}

func (udc *UserDomainCreate) sqlSave(ctx context.Context) (*UserDomain, error) {
	if err := udc.check(); err != nil {
		return nil, err
	}
	_node, _spec := udc.createSpec()
	if err := sqlgraph.CreateNode(ctx, udc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (udc *UserDomainCreate) createSpec() (*UserDomain, *sqlgraph.CreateSpec) {
	var (
		_node = &UserDomain{config: udc.config}
		_spec = sqlgraph.NewCreateSpec(userdomain.Table, nil)
	)
	_spec.OnConflict = udc.conflict
	if nodes := udc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.UserTable,
			Columns: []string{userdomain.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := udc.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.DomainTable,
			Columns: []string{userdomain.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DomainID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := udc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userdomain.RoleTable,
			Columns: []string{userdomain.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserDomain.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserDomainUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (udc *UserDomainCreate) OnConflict(opts ...sql.ConflictOption) *UserDomainUpsertOne {
	udc.conflict = opts
	return &UserDomainUpsertOne{
		create: udc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserDomain.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (udc *UserDomainCreate) OnConflictColumns(columns ...string) *UserDomainUpsertOne {
	udc.conflict = append(udc.conflict, sql.ConflictColumns(columns...))
	return &UserDomainUpsertOne{
		create: udc,
	}
}

type (
	// UserDomainUpsertOne is the builder for "upsert"-ing
	//  one UserDomain node.
	UserDomainUpsertOne struct {
		create *UserDomainCreate
	}

	// UserDomainUpsert is the "OnConflict" setter.
	UserDomainUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *UserDomainUpsert) SetUserID(v xid.ID) *UserDomainUpsert {
	u.Set(userdomain.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserDomainUpsert) UpdateUserID() *UserDomainUpsert {
	u.SetExcluded(userdomain.FieldUserID)
	return u
}

// SetDomainID sets the "domain_id" field.
func (u *UserDomainUpsert) SetDomainID(v xid.ID) *UserDomainUpsert {
	u.Set(userdomain.FieldDomainID, v)
	return u
}

// UpdateDomainID sets the "domain_id" field to the value that was provided on create.
func (u *UserDomainUpsert) UpdateDomainID() *UserDomainUpsert {
	u.SetExcluded(userdomain.FieldDomainID)
	return u
}

// SetRoleID sets the "role_id" field.
func (u *UserDomainUpsert) SetRoleID(v xid.ID) *UserDomainUpsert {
	u.Set(userdomain.FieldRoleID, v)
	return u
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *UserDomainUpsert) UpdateRoleID() *UserDomainUpsert {
	u.SetExcluded(userdomain.FieldRoleID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserDomain.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserDomainUpsertOne) UpdateNewValues() *UserDomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserDomain.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserDomainUpsertOne) Ignore() *UserDomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserDomainUpsertOne) DoNothing() *UserDomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserDomainCreate.OnConflict
// documentation for more info.
func (u *UserDomainUpsertOne) Update(set func(*UserDomainUpsert)) *UserDomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserDomainUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserDomainUpsertOne) SetUserID(v xid.ID) *UserDomainUpsertOne {
	return u.Update(func(s *UserDomainUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserDomainUpsertOne) UpdateUserID() *UserDomainUpsertOne {
	return u.Update(func(s *UserDomainUpsert) {
		s.UpdateUserID()
	})
}

// SetDomainID sets the "domain_id" field.
func (u *UserDomainUpsertOne) SetDomainID(v xid.ID) *UserDomainUpsertOne {
	return u.Update(func(s *UserDomainUpsert) {
		s.SetDomainID(v)
	})
}

// UpdateDomainID sets the "domain_id" field to the value that was provided on create.
func (u *UserDomainUpsertOne) UpdateDomainID() *UserDomainUpsertOne {
	return u.Update(func(s *UserDomainUpsert) {
		s.UpdateDomainID()
	})
}

// SetRoleID sets the "role_id" field.
func (u *UserDomainUpsertOne) SetRoleID(v xid.ID) *UserDomainUpsertOne {
	return u.Update(func(s *UserDomainUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *UserDomainUpsertOne) UpdateRoleID() *UserDomainUpsertOne {
	return u.Update(func(s *UserDomainUpsert) {
		s.UpdateRoleID()
	})
}

// Exec executes the query.
func (u *UserDomainUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("dbauth: missing options for UserDomainCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserDomainUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// UserDomainCreateBulk is the builder for creating many UserDomain entities in bulk.
type UserDomainCreateBulk struct {
	config
	err      error
	builders []*UserDomainCreate
	conflict []sql.ConflictOption
}

// Save creates the UserDomain entities in the database.
func (udcb *UserDomainCreateBulk) Save(ctx context.Context) ([]*UserDomain, error) {
	if udcb.err != nil {
		return nil, udcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(udcb.builders))
	nodes := make([]*UserDomain, len(udcb.builders))
	mutators := make([]Mutator, len(udcb.builders))
	for i := range udcb.builders {
		func(i int, root context.Context) {
			builder := udcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserDomainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, udcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = udcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, udcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, udcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (udcb *UserDomainCreateBulk) SaveX(ctx context.Context) []*UserDomain {
	v, err := udcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udcb *UserDomainCreateBulk) Exec(ctx context.Context) error {
	_, err := udcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udcb *UserDomainCreateBulk) ExecX(ctx context.Context) {
	if err := udcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserDomain.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserDomainUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (udcb *UserDomainCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserDomainUpsertBulk {
	udcb.conflict = opts
	return &UserDomainUpsertBulk{
		create: udcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserDomain.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (udcb *UserDomainCreateBulk) OnConflictColumns(columns ...string) *UserDomainUpsertBulk {
	udcb.conflict = append(udcb.conflict, sql.ConflictColumns(columns...))
	return &UserDomainUpsertBulk{
		create: udcb,
	}
}

// UserDomainUpsertBulk is the builder for "upsert"-ing
// a bulk of UserDomain nodes.
type UserDomainUpsertBulk struct {
	create *UserDomainCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserDomain.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserDomainUpsertBulk) UpdateNewValues() *UserDomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserDomain.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserDomainUpsertBulk) Ignore() *UserDomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserDomainUpsertBulk) DoNothing() *UserDomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserDomainCreateBulk.OnConflict
// documentation for more info.
func (u *UserDomainUpsertBulk) Update(set func(*UserDomainUpsert)) *UserDomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserDomainUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserDomainUpsertBulk) SetUserID(v xid.ID) *UserDomainUpsertBulk {
	return u.Update(func(s *UserDomainUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserDomainUpsertBulk) UpdateUserID() *UserDomainUpsertBulk {
	return u.Update(func(s *UserDomainUpsert) {
		s.UpdateUserID()
	})
}

// SetDomainID sets the "domain_id" field.
func (u *UserDomainUpsertBulk) SetDomainID(v xid.ID) *UserDomainUpsertBulk {
	return u.Update(func(s *UserDomainUpsert) {
		s.SetDomainID(v)
	})
}

// UpdateDomainID sets the "domain_id" field to the value that was provided on create.
func (u *UserDomainUpsertBulk) UpdateDomainID() *UserDomainUpsertBulk {
	return u.Update(func(s *UserDomainUpsert) {
		s.UpdateDomainID()
	})
}

// SetRoleID sets the "role_id" field.
func (u *UserDomainUpsertBulk) SetRoleID(v xid.ID) *UserDomainUpsertBulk {
	return u.Update(func(s *UserDomainUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *UserDomainUpsertBulk) UpdateRoleID() *UserDomainUpsertBulk {
	return u.Update(func(s *UserDomainUpsert) {
		s.UpdateRoleID()
	})
}

// Exec executes the query.
func (u *UserDomainUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("dbauth: OnConflict was set for builder %d. Set it on the UserDomainCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("dbauth: missing options for UserDomainCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserDomainUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
