// Code generated by ent, DO NOT EDIT.

package dbexample

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/hughbliss/my_database/pkg/gen/dbexample/example"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (e *ExampleQuery) CollectFields(ctx context.Context, satisfies ...string) (*ExampleQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return e, nil
	}
	if err := e.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return e, nil
}

func (e *ExampleQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(example.Columns))
		selectedFields = []string{example.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "someString":
			if _, ok := fieldSeen[example.FieldSomeString]; !ok {
				selectedFields = append(selectedFields, example.FieldSomeString)
				fieldSeen[example.FieldSomeString] = struct{}{}
			}
		case "someInt":
			if _, ok := fieldSeen[example.FieldSomeInt]; !ok {
				selectedFields = append(selectedFields, example.FieldSomeInt)
				fieldSeen[example.FieldSomeInt] = struct{}{}
			}
		case "someFloat":
			if _, ok := fieldSeen[example.FieldSomeFloat]; !ok {
				selectedFields = append(selectedFields, example.FieldSomeFloat)
				fieldSeen[example.FieldSomeFloat] = struct{}{}
			}
		case "someBool":
			if _, ok := fieldSeen[example.FieldSomeBool]; !ok {
				selectedFields = append(selectedFields, example.FieldSomeBool)
				fieldSeen[example.FieldSomeBool] = struct{}{}
			}
		case "someTime":
			if _, ok := fieldSeen[example.FieldSomeTime]; !ok {
				selectedFields = append(selectedFields, example.FieldSomeTime)
				fieldSeen[example.FieldSomeTime] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		e.Select(selectedFields...)
	}
	return nil
}

type examplePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ExamplePaginateOption
}

func newExamplePaginateArgs(rv map[string]any) *examplePaginateArgs {
	args := &examplePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
