// Code generated by ent, DO NOT EDIT.

package dbauth

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/domain"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/role"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/user"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/userdomain"
	"github.com/rs/xid"
)

// UserDomain is the model entity for the UserDomain schema.
type UserDomain struct {
	config `json:"-"`
	// UserID holds the value of the "user_id" field.
	UserID xid.ID `json:"user_id,omitempty"`
	// DomainID holds the value of the "domain_id" field.
	DomainID xid.ID `json:"domain_id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID xid.ID `json:"role_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserDomainQuery when eager-loading is set.
	Edges        UserDomainEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserDomainEdges holds the relations/edges for other nodes in the graph.
type UserDomainEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Domain holds the value of the domain edge.
	Domain *Domain `json:"domain,omitempty"`
	// Role holds the value of the role edge.
	Role *Role `json:"role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserDomainEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// DomainOrErr returns the Domain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserDomainEdges) DomainOrErr() (*Domain, error) {
	if e.Domain != nil {
		return e.Domain, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: domain.Label}
	}
	return nil, &NotLoadedError{edge: "domain"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserDomainEdges) RoleOrErr() (*Role, error) {
	if e.Role != nil {
		return e.Role, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: role.Label}
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserDomain) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userdomain.FieldUserID, userdomain.FieldDomainID, userdomain.FieldRoleID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserDomain fields.
func (ud *UserDomain) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userdomain.FieldUserID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ud.UserID = *value
			}
		case userdomain.FieldDomainID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field domain_id", values[i])
			} else if value != nil {
				ud.DomainID = *value
			}
		case userdomain.FieldRoleID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value != nil {
				ud.RoleID = *value
			}
		default:
			ud.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserDomain.
// This includes values selected through modifiers, order, etc.
func (ud *UserDomain) Value(name string) (ent.Value, error) {
	return ud.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserDomain entity.
func (ud *UserDomain) QueryUser() *UserQuery {
	return NewUserDomainClient(ud.config).QueryUser(ud)
}

// QueryDomain queries the "domain" edge of the UserDomain entity.
func (ud *UserDomain) QueryDomain() *DomainQuery {
	return NewUserDomainClient(ud.config).QueryDomain(ud)
}

// QueryRole queries the "role" edge of the UserDomain entity.
func (ud *UserDomain) QueryRole() *RoleQuery {
	return NewUserDomainClient(ud.config).QueryRole(ud)
}

// Update returns a builder for updating this UserDomain.
// Note that you need to call UserDomain.Unwrap() before calling this method if this UserDomain
// was returned from a transaction, and the transaction was committed or rolled back.
func (ud *UserDomain) Update() *UserDomainUpdateOne {
	return NewUserDomainClient(ud.config).UpdateOne(ud)
}

// Unwrap unwraps the UserDomain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ud *UserDomain) Unwrap() *UserDomain {
	_tx, ok := ud.config.driver.(*txDriver)
	if !ok {
		panic("dbauth: UserDomain is not a transactional entity")
	}
	ud.config.driver = _tx.drv
	return ud
}

// String implements the fmt.Stringer.
func (ud *UserDomain) String() string {
	var builder strings.Builder
	builder.WriteString("UserDomain(")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ud.UserID))
	builder.WriteString(", ")
	builder.WriteString("domain_id=")
	builder.WriteString(fmt.Sprintf("%v", ud.DomainID))
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", ud.RoleID))
	builder.WriteByte(')')
	return builder.String()
}

// UserDomains is a parsable slice of UserDomain.
type UserDomains []*UserDomain
