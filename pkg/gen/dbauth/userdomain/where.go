// Code generated by ent, DO NOT EDIT.

package userdomain

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/predicate"
	"github.com/rs/xid"
)

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldEQ(FieldUserID, v))
}

// DomainID applies equality check predicate on the "domain_id" field. It's identical to DomainIDEQ.
func DomainID(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldEQ(FieldDomainID, v))
}

// RoleID applies equality check predicate on the "role_id" field. It's identical to RoleIDEQ.
func RoleID(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldEQ(FieldRoleID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldContains(FieldUserID, vc))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldHasPrefix(FieldUserID, vc))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldHasSuffix(FieldUserID, vc))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldEqualFold(FieldUserID, vc))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldContainsFold(FieldUserID, vc))
}

// DomainIDEQ applies the EQ predicate on the "domain_id" field.
func DomainIDEQ(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldEQ(FieldDomainID, v))
}

// DomainIDNEQ applies the NEQ predicate on the "domain_id" field.
func DomainIDNEQ(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldNEQ(FieldDomainID, v))
}

// DomainIDIn applies the In predicate on the "domain_id" field.
func DomainIDIn(vs ...xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldIn(FieldDomainID, vs...))
}

// DomainIDNotIn applies the NotIn predicate on the "domain_id" field.
func DomainIDNotIn(vs ...xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldNotIn(FieldDomainID, vs...))
}

// DomainIDGT applies the GT predicate on the "domain_id" field.
func DomainIDGT(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldGT(FieldDomainID, v))
}

// DomainIDGTE applies the GTE predicate on the "domain_id" field.
func DomainIDGTE(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldGTE(FieldDomainID, v))
}

// DomainIDLT applies the LT predicate on the "domain_id" field.
func DomainIDLT(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldLT(FieldDomainID, v))
}

// DomainIDLTE applies the LTE predicate on the "domain_id" field.
func DomainIDLTE(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldLTE(FieldDomainID, v))
}

// DomainIDContains applies the Contains predicate on the "domain_id" field.
func DomainIDContains(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldContains(FieldDomainID, vc))
}

// DomainIDHasPrefix applies the HasPrefix predicate on the "domain_id" field.
func DomainIDHasPrefix(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldHasPrefix(FieldDomainID, vc))
}

// DomainIDHasSuffix applies the HasSuffix predicate on the "domain_id" field.
func DomainIDHasSuffix(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldHasSuffix(FieldDomainID, vc))
}

// DomainIDEqualFold applies the EqualFold predicate on the "domain_id" field.
func DomainIDEqualFold(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldEqualFold(FieldDomainID, vc))
}

// DomainIDContainsFold applies the ContainsFold predicate on the "domain_id" field.
func DomainIDContainsFold(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldContainsFold(FieldDomainID, vc))
}

// RoleIDEQ applies the EQ predicate on the "role_id" field.
func RoleIDEQ(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldEQ(FieldRoleID, v))
}

// RoleIDNEQ applies the NEQ predicate on the "role_id" field.
func RoleIDNEQ(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldNEQ(FieldRoleID, v))
}

// RoleIDIn applies the In predicate on the "role_id" field.
func RoleIDIn(vs ...xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldIn(FieldRoleID, vs...))
}

// RoleIDNotIn applies the NotIn predicate on the "role_id" field.
func RoleIDNotIn(vs ...xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldNotIn(FieldRoleID, vs...))
}

// RoleIDGT applies the GT predicate on the "role_id" field.
func RoleIDGT(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldGT(FieldRoleID, v))
}

// RoleIDGTE applies the GTE predicate on the "role_id" field.
func RoleIDGTE(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldGTE(FieldRoleID, v))
}

// RoleIDLT applies the LT predicate on the "role_id" field.
func RoleIDLT(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldLT(FieldRoleID, v))
}

// RoleIDLTE applies the LTE predicate on the "role_id" field.
func RoleIDLTE(v xid.ID) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldLTE(FieldRoleID, v))
}

// RoleIDContains applies the Contains predicate on the "role_id" field.
func RoleIDContains(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldContains(FieldRoleID, vc))
}

// RoleIDHasPrefix applies the HasPrefix predicate on the "role_id" field.
func RoleIDHasPrefix(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldHasPrefix(FieldRoleID, vc))
}

// RoleIDHasSuffix applies the HasSuffix predicate on the "role_id" field.
func RoleIDHasSuffix(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldHasSuffix(FieldRoleID, vc))
}

// RoleIDEqualFold applies the EqualFold predicate on the "role_id" field.
func RoleIDEqualFold(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldEqualFold(FieldRoleID, vc))
}

// RoleIDContainsFold applies the ContainsFold predicate on the "role_id" field.
func RoleIDContainsFold(v xid.ID) predicate.UserDomain {
	vc := v.String()
	return predicate.UserDomain(sql.FieldContainsFold(FieldRoleID, vc))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserDomain {
	return predicate.UserDomain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserDomain {
	return predicate.UserDomain(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDomain applies the HasEdge predicate on the "domain" edge.
func HasDomain() predicate.UserDomain {
	return predicate.UserDomain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, DomainColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, DomainTable, DomainColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDomainWith applies the HasEdge predicate on the "domain" edge with a given conditions (other predicates).
func HasDomainWith(preds ...predicate.Domain) predicate.UserDomain {
	return predicate.UserDomain(func(s *sql.Selector) {
		step := newDomainStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.UserDomain {
	return predicate.UserDomain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, RoleColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.Role) predicate.UserDomain {
	return predicate.UserDomain(func(s *sql.Selector) {
		step := newRoleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserDomain) predicate.UserDomain {
	return predicate.UserDomain(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserDomain) predicate.UserDomain {
	return predicate.UserDomain(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserDomain) predicate.UserDomain {
	return predicate.UserDomain(sql.NotPredicates(p))
}
