// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/hughbliss/my_database/pkg/gen/dbauth"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/domain"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/predicate"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/role"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/user"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/userdomain"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next dbauth.Querier) dbauth.Querier {
	return dbauth.QuerierFunc(func(ctx context.Context, q dbauth.Query) (dbauth.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next dbauth.Querier) dbauth.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q dbauth.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The DomainFunc type is an adapter to allow the use of ordinary function as a Querier.
type DomainFunc func(context.Context, *dbauth.DomainQuery) (dbauth.Value, error)

// Query calls f(ctx, q).
func (f DomainFunc) Query(ctx context.Context, q dbauth.Query) (dbauth.Value, error) {
	if q, ok := q.(*dbauth.DomainQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *dbauth.DomainQuery", q)
}

// The TraverseDomain type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDomain func(context.Context, *dbauth.DomainQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDomain) Intercept(next dbauth.Querier) dbauth.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDomain) Traverse(ctx context.Context, q dbauth.Query) error {
	if q, ok := q.(*dbauth.DomainQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *dbauth.DomainQuery", q)
}

// The RoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoleFunc func(context.Context, *dbauth.RoleQuery) (dbauth.Value, error)

// Query calls f(ctx, q).
func (f RoleFunc) Query(ctx context.Context, q dbauth.Query) (dbauth.Value, error) {
	if q, ok := q.(*dbauth.RoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *dbauth.RoleQuery", q)
}

// The TraverseRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRole func(context.Context, *dbauth.RoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRole) Intercept(next dbauth.Querier) dbauth.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRole) Traverse(ctx context.Context, q dbauth.Query) error {
	if q, ok := q.(*dbauth.RoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *dbauth.RoleQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *dbauth.UserQuery) (dbauth.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q dbauth.Query) (dbauth.Value, error) {
	if q, ok := q.(*dbauth.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *dbauth.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *dbauth.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next dbauth.Querier) dbauth.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q dbauth.Query) error {
	if q, ok := q.(*dbauth.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *dbauth.UserQuery", q)
}

// The UserDomainFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserDomainFunc func(context.Context, *dbauth.UserDomainQuery) (dbauth.Value, error)

// Query calls f(ctx, q).
func (f UserDomainFunc) Query(ctx context.Context, q dbauth.Query) (dbauth.Value, error) {
	if q, ok := q.(*dbauth.UserDomainQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *dbauth.UserDomainQuery", q)
}

// The TraverseUserDomain type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserDomain func(context.Context, *dbauth.UserDomainQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserDomain) Intercept(next dbauth.Querier) dbauth.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserDomain) Traverse(ctx context.Context, q dbauth.Query) error {
	if q, ok := q.(*dbauth.UserDomainQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *dbauth.UserDomainQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q dbauth.Query) (Query, error) {
	switch q := q.(type) {
	case *dbauth.DomainQuery:
		return &query[*dbauth.DomainQuery, predicate.Domain, domain.OrderOption]{typ: dbauth.TypeDomain, tq: q}, nil
	case *dbauth.RoleQuery:
		return &query[*dbauth.RoleQuery, predicate.Role, role.OrderOption]{typ: dbauth.TypeRole, tq: q}, nil
	case *dbauth.UserQuery:
		return &query[*dbauth.UserQuery, predicate.User, user.OrderOption]{typ: dbauth.TypeUser, tq: q}, nil
	case *dbauth.UserDomainQuery:
		return &query[*dbauth.UserDomainQuery, predicate.UserDomain, userdomain.OrderOption]{typ: dbauth.TypeUserDomain, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
