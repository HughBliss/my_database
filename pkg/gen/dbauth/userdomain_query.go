// Code generated by ent, DO NOT EDIT.

package dbauth

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/domain"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/predicate"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/role"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/user"
	"github.com/hughbliss/my_database/pkg/gen/dbauth/userdomain"
	"github.com/rs/xid"
)

// UserDomainQuery is the builder for querying UserDomain entities.
type UserDomainQuery struct {
	config
	ctx        *QueryContext
	order      []userdomain.OrderOption
	inters     []Interceptor
	predicates []predicate.UserDomain
	withUser   *UserQuery
	withDomain *DomainQuery
	withRole   *RoleQuery
	loadTotal  []func(context.Context, []*UserDomain) error
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserDomainQuery builder.
func (udq *UserDomainQuery) Where(ps ...predicate.UserDomain) *UserDomainQuery {
	udq.predicates = append(udq.predicates, ps...)
	return udq
}

// Limit the number of records to be returned by this query.
func (udq *UserDomainQuery) Limit(limit int) *UserDomainQuery {
	udq.ctx.Limit = &limit
	return udq
}

// Offset to start from.
func (udq *UserDomainQuery) Offset(offset int) *UserDomainQuery {
	udq.ctx.Offset = &offset
	return udq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (udq *UserDomainQuery) Unique(unique bool) *UserDomainQuery {
	udq.ctx.Unique = &unique
	return udq
}

// Order specifies how the records should be ordered.
func (udq *UserDomainQuery) Order(o ...userdomain.OrderOption) *UserDomainQuery {
	udq.order = append(udq.order, o...)
	return udq
}

// QueryUser chains the current query on the "user" edge.
func (udq *UserDomainQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: udq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := udq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := udq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userdomain.Table, userdomain.UserColumn, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userdomain.UserTable, userdomain.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(udq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDomain chains the current query on the "domain" edge.
func (udq *UserDomainQuery) QueryDomain() *DomainQuery {
	query := (&DomainClient{config: udq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := udq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := udq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userdomain.Table, userdomain.DomainColumn, selector),
			sqlgraph.To(domain.Table, domain.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userdomain.DomainTable, userdomain.DomainColumn),
		)
		fromU = sqlgraph.SetNeighbors(udq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRole chains the current query on the "role" edge.
func (udq *UserDomainQuery) QueryRole() *RoleQuery {
	query := (&RoleClient{config: udq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := udq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := udq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userdomain.Table, userdomain.RoleColumn, selector),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userdomain.RoleTable, userdomain.RoleColumn),
		)
		fromU = sqlgraph.SetNeighbors(udq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserDomain entity from the query.
// Returns a *NotFoundError when no UserDomain was found.
func (udq *UserDomainQuery) First(ctx context.Context) (*UserDomain, error) {
	nodes, err := udq.Limit(1).All(setContextOp(ctx, udq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userdomain.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (udq *UserDomainQuery) FirstX(ctx context.Context) *UserDomain {
	node, err := udq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single UserDomain entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserDomain entity is found.
// Returns a *NotFoundError when no UserDomain entities are found.
func (udq *UserDomainQuery) Only(ctx context.Context) (*UserDomain, error) {
	nodes, err := udq.Limit(2).All(setContextOp(ctx, udq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userdomain.Label}
	default:
		return nil, &NotSingularError{userdomain.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (udq *UserDomainQuery) OnlyX(ctx context.Context) *UserDomain {
	node, err := udq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of UserDomains.
func (udq *UserDomainQuery) All(ctx context.Context) ([]*UserDomain, error) {
	ctx = setContextOp(ctx, udq.ctx, ent.OpQueryAll)
	if err := udq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserDomain, *UserDomainQuery]()
	return withInterceptors[[]*UserDomain](ctx, udq, qr, udq.inters)
}

// AllX is like All, but panics if an error occurs.
func (udq *UserDomainQuery) AllX(ctx context.Context) []*UserDomain {
	nodes, err := udq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (udq *UserDomainQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, udq.ctx, ent.OpQueryCount)
	if err := udq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, udq, querierCount[*UserDomainQuery](), udq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (udq *UserDomainQuery) CountX(ctx context.Context) int {
	count, err := udq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (udq *UserDomainQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, udq.ctx, ent.OpQueryExist)
	switch _, err := udq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("dbauth: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (udq *UserDomainQuery) ExistX(ctx context.Context) bool {
	exist, err := udq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserDomainQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (udq *UserDomainQuery) Clone() *UserDomainQuery {
	if udq == nil {
		return nil
	}
	return &UserDomainQuery{
		config:     udq.config,
		ctx:        udq.ctx.Clone(),
		order:      append([]userdomain.OrderOption{}, udq.order...),
		inters:     append([]Interceptor{}, udq.inters...),
		predicates: append([]predicate.UserDomain{}, udq.predicates...),
		withUser:   udq.withUser.Clone(),
		withDomain: udq.withDomain.Clone(),
		withRole:   udq.withRole.Clone(),
		// clone intermediate query.
		sql:       udq.sql.Clone(),
		path:      udq.path,
		modifiers: append([]func(*sql.Selector){}, udq.modifiers...),
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (udq *UserDomainQuery) WithUser(opts ...func(*UserQuery)) *UserDomainQuery {
	query := (&UserClient{config: udq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	udq.withUser = query
	return udq
}

// WithDomain tells the query-builder to eager-load the nodes that are connected to
// the "domain" edge. The optional arguments are used to configure the query builder of the edge.
func (udq *UserDomainQuery) WithDomain(opts ...func(*DomainQuery)) *UserDomainQuery {
	query := (&DomainClient{config: udq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	udq.withDomain = query
	return udq
}

// WithRole tells the query-builder to eager-load the nodes that are connected to
// the "role" edge. The optional arguments are used to configure the query builder of the edge.
func (udq *UserDomainQuery) WithRole(opts ...func(*RoleQuery)) *UserDomainQuery {
	query := (&RoleClient{config: udq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	udq.withRole = query
	return udq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID xid.ID `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserDomain.Query().
//		GroupBy(userdomain.FieldUserID).
//		Aggregate(dbauth.Count()).
//		Scan(ctx, &v)
func (udq *UserDomainQuery) GroupBy(field string, fields ...string) *UserDomainGroupBy {
	udq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserDomainGroupBy{build: udq}
	grbuild.flds = &udq.ctx.Fields
	grbuild.label = userdomain.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID xid.ID `json:"user_id,omitempty"`
//	}
//
//	client.UserDomain.Query().
//		Select(userdomain.FieldUserID).
//		Scan(ctx, &v)
func (udq *UserDomainQuery) Select(fields ...string) *UserDomainSelect {
	udq.ctx.Fields = append(udq.ctx.Fields, fields...)
	sbuild := &UserDomainSelect{UserDomainQuery: udq}
	sbuild.label = userdomain.Label
	sbuild.flds, sbuild.scan = &udq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserDomainSelect configured with the given aggregations.
func (udq *UserDomainQuery) Aggregate(fns ...AggregateFunc) *UserDomainSelect {
	return udq.Select().Aggregate(fns...)
}

func (udq *UserDomainQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range udq.inters {
		if inter == nil {
			return fmt.Errorf("dbauth: uninitialized interceptor (forgotten import dbauth/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, udq); err != nil {
				return err
			}
		}
	}
	for _, f := range udq.ctx.Fields {
		if !userdomain.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("dbauth: invalid field %q for query", f)}
		}
	}
	if udq.path != nil {
		prev, err := udq.path(ctx)
		if err != nil {
			return err
		}
		udq.sql = prev
	}
	return nil
}

func (udq *UserDomainQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserDomain, error) {
	var (
		nodes       = []*UserDomain{}
		_spec       = udq.querySpec()
		loadedTypes = [3]bool{
			udq.withUser != nil,
			udq.withDomain != nil,
			udq.withRole != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserDomain).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserDomain{config: udq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(udq.modifiers) > 0 {
		_spec.Modifiers = udq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, udq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := udq.withUser; query != nil {
		if err := udq.loadUser(ctx, query, nodes, nil,
			func(n *UserDomain, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := udq.withDomain; query != nil {
		if err := udq.loadDomain(ctx, query, nodes, nil,
			func(n *UserDomain, e *Domain) { n.Edges.Domain = e }); err != nil {
			return nil, err
		}
	}
	if query := udq.withRole; query != nil {
		if err := udq.loadRole(ctx, query, nodes, nil,
			func(n *UserDomain, e *Role) { n.Edges.Role = e }); err != nil {
			return nil, err
		}
	}
	for i := range udq.loadTotal {
		if err := udq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (udq *UserDomainQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserDomain, init func(*UserDomain), assign func(*UserDomain, *User)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*UserDomain)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (udq *UserDomainQuery) loadDomain(ctx context.Context, query *DomainQuery, nodes []*UserDomain, init func(*UserDomain), assign func(*UserDomain, *Domain)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*UserDomain)
	for i := range nodes {
		fk := nodes[i].DomainID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(domain.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "domain_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (udq *UserDomainQuery) loadRole(ctx context.Context, query *RoleQuery, nodes []*UserDomain, init func(*UserDomain), assign func(*UserDomain, *Role)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*UserDomain)
	for i := range nodes {
		fk := nodes[i].RoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(role.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (udq *UserDomainQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := udq.querySpec()
	if len(udq.modifiers) > 0 {
		_spec.Modifiers = udq.modifiers
	}
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, udq.driver, _spec)
}

func (udq *UserDomainQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(userdomain.Table, userdomain.Columns, nil)
	_spec.From = udq.sql
	if unique := udq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if udq.path != nil {
		_spec.Unique = true
	}
	if fields := udq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if udq.withUser != nil {
			_spec.Node.AddColumnOnce(userdomain.FieldUserID)
		}
		if udq.withDomain != nil {
			_spec.Node.AddColumnOnce(userdomain.FieldDomainID)
		}
		if udq.withRole != nil {
			_spec.Node.AddColumnOnce(userdomain.FieldRoleID)
		}
	}
	if ps := udq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := udq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := udq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := udq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (udq *UserDomainQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(udq.driver.Dialect())
	t1 := builder.Table(userdomain.Table)
	columns := udq.ctx.Fields
	if len(columns) == 0 {
		columns = userdomain.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if udq.sql != nil {
		selector = udq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if udq.ctx.Unique != nil && *udq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range udq.modifiers {
		m(selector)
	}
	for _, p := range udq.predicates {
		p(selector)
	}
	for _, p := range udq.order {
		p(selector)
	}
	if offset := udq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := udq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (udq *UserDomainQuery) Modify(modifiers ...func(s *sql.Selector)) *UserDomainSelect {
	udq.modifiers = append(udq.modifiers, modifiers...)
	return udq.Select()
}

// UserDomainGroupBy is the group-by builder for UserDomain entities.
type UserDomainGroupBy struct {
	selector
	build *UserDomainQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (udgb *UserDomainGroupBy) Aggregate(fns ...AggregateFunc) *UserDomainGroupBy {
	udgb.fns = append(udgb.fns, fns...)
	return udgb
}

// Scan applies the selector query and scans the result into the given value.
func (udgb *UserDomainGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, udgb.build.ctx, ent.OpQueryGroupBy)
	if err := udgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserDomainQuery, *UserDomainGroupBy](ctx, udgb.build, udgb, udgb.build.inters, v)
}

func (udgb *UserDomainGroupBy) sqlScan(ctx context.Context, root *UserDomainQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(udgb.fns))
	for _, fn := range udgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*udgb.flds)+len(udgb.fns))
		for _, f := range *udgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*udgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := udgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserDomainSelect is the builder for selecting fields of UserDomain entities.
type UserDomainSelect struct {
	*UserDomainQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uds *UserDomainSelect) Aggregate(fns ...AggregateFunc) *UserDomainSelect {
	uds.fns = append(uds.fns, fns...)
	return uds
}

// Scan applies the selector query and scans the result into the given value.
func (uds *UserDomainSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uds.ctx, ent.OpQuerySelect)
	if err := uds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserDomainQuery, *UserDomainSelect](ctx, uds.UserDomainQuery, uds, uds.inters, v)
}

func (uds *UserDomainSelect) sqlScan(ctx context.Context, root *UserDomainQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(uds.fns))
	for _, fn := range uds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*uds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (uds *UserDomainSelect) Modify(modifiers ...func(s *sql.Selector)) *UserDomainSelect {
	uds.modifiers = append(uds.modifiers, modifiers...)
	return uds
}
